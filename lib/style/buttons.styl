/*
Buttons

Styleguide 2.0
*/

$button-reset()
  color: inherit
  font: inherit
  font-size: inherit
  line-height: normal
  vertical-align: baseline
  padding: 0
  margin: 0
  border: 0
  background: none
  overflow: visible
  user-select: none
  cursor: pointer
  &::-moz-focus-inner
    border: 0
    padding: 0


$cfnext-button($color, $text)
  $cfnext-button-layout()
  $cfnext-button-colors($color, $text)
  $cfnext-button-loading($text)


/**
 * Applies layout and typography styles
 */
$button-vertical-padding = (10 / 16) * 1rem
$cfnext-button-layout()
  display: inline-block
  padding: $button-vertical-padding 1.5rem
  cursor: pointer
  text-align: center
  font-size: .875rem
  font-weight: 500
  white-space: nowrap
  border: 1px solid transparent
  border-radius: 2px
  line-height: $base-line-height


$cfnext-button-large()
  font-size: 1.15rem
  padding: 1rem 2.5rem


/**
 * Applies background, text and border colors for the various states.
 */
$cfnext-button-colors($bg, $text)
  color: $text
  background: $bg
  background-size: 100% 200%
  transition-property: all
  transition-timing-function: ease-in-out
  transition-duration: 0.1s

  &:hover
    background-position: 0 100%

  &.active,&:active
    box-shadow: inset 0 1px 2px rgba(black, .12)


  // Reset for links
  &:link, a&:hover, a&:link, a&:visited
    color: $text

  // Reset Browser styles
  &, &:hover, &:active
    outline: 0

  &:disabled, &[aria-disabled=true]
    opacity: 0.4
    cursor: default
    // This overides any other state styles, like hover or active
    background: $bg
    box-shadow: none


/**
 * Add a spinner pseude element and activate it in the `is-loading`
 * state.
 */
$cfnext-button-loading($text)
  > *
    display: inline-block
  +$spinner-base()
    display: inline-block
  &.cf-is-loading
    &:disabled
      opacity: 1
    +$spinner-active($text)
      margin-left: 5px


/*
Buttons

The following button styles should be used depending on the type of action that is performed.
Primary action     - Used for the most important action in a given context
Secondary action   - Used for the secondary action in a given context

.cf-btn-primary    - Primary action
.cf-btn-secondary  - Secondary action

Markup:
<button class="{{modifier_class}}">Action</button>
<button class="{{modifier_class}} cf-is-loading">Loading</button>
<button class="{{modifier_class}}" disabled>Disabled</button>

Styleguide 2.1
*/

$btn-action-bg = linear-gradient(to top, $colors.blue-dark, $colors.blue-light)
$btn-action()
  $cfnext-button($btn-action-bg, white)
  border-color: $colors.blue-dark

  &:hover, &.active
    border-color: $colors.blue-darkest

.cf-btn-primary
  $btn-action()

$btn-secondary-text = $colors.text-mid
$btn-secondary-bg = $colors.element-light
.cf-btn-secondary
  $cfnext-button($btn-secondary-bg, $btn-secondary-text)
  border-color: $colors.element-dark

  &:hover, &.active
    background-color: $colors.element-mid
    border-color: $colors.element-darkest

  > cf-icon[name="plus"]
    circle
      fill: $btn-secondary-text
    path
      stroke: $btn-secondary-bg

/**
Block button

Use `.cf-block` together with a button to make it a block element

Markup:
<p>
  <button class="cf-btn-primary cf-block">Block Action Button</button>
</p>
<p>
  <button class="cf-btn-secondary cf-block cf-is-loading">Loading</button>
</p>

Styleguide 2.2
*/

$btn-block()
  display: block
  width: 100%
  position: relative
  &:after
    position: absolute

  &.cf-is-loading
    &:after
      // This overides the width and height transitions
      transition: opacity .2s linear
      top: 11px

.cf-btn-primary,
.cf-btn-secondary
  &.cf-block
    $btn-block()

